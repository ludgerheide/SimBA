# Configs for the eBus Toolbox

# Input file containing trip information
input_schedule = "./data/private_examples/trips_example-bvg_datetime_medium.csv"
# output path for scenario.json -- called input since its input for spiceev
input = "./data/private_examples/scenario.json"
# Preferred charging type. Options: depb, oppb (default: depb)
preferred_charging_type = "depb"
# vehicle types
vehicle_types = "./data/examples/vehicle_types.json"
# minimum standing time in depot for every bus in hours (default:6)
min_standing_time_depot = 5
#electrified stations
electrified_stations = data/private_examples/electrified_stations.json
# set random seed (for always random: set seed = null)
seed = 1
# maximum number of days to simulate, if not set simulate entire schedule
days = 10
# set length of timestep in minutes (default: 15 minute intervals)
interval = 1
# set minimum allowed state of charge when leaving (default: 0.8)
desired_soc = 1
# max power of grid connectors at depot and opp stations
# default: Sum of max power of all charging stations at this grid connector
gc_power_opps = 1000
gc_power_deps = 1000
# max power of charging station at depot and opp stations
# at depot stations opp and depot busses have distinct charging stations
cs_power_opps = 400
cs_power_deps_depb = 100
cs_power_deps_oppb = 150
# min charging time at opp station [minutes]
min_charging_time_opp = 2
# define hours of traffic_jam (options are "stop&go" and "dense")
#rush_hour = {"stop&go": [["07:00", "09:00"], ["15:00", "17:00"]], "dense": [["17:00", "19:00"]]}

# set stationary batteries [capacity, C-Rate]
# battery with capacity = 75 kWh and C-Rate = 0.5
#battery = [[50, 1]]
# 2 batteries with capacity = 50 kWh, C-Rate = 1, grid_connector = "Betriebshof A")
battery = [[50, 1, "Betriebshof A"]]
# unlimited battery capacity with constant (dis)charge of 50 kWh
#battery = [[-1, 50]]


# set CSV-files
# list of external load timeseries (in this example in same directory as resulting json) and
# grid connector at which the timeseries shall be applied
# e.g. [["timeseries_1_path", "gc_name_1"], ["timeseries_2_path", "gc_name_2"]]
#include_ext_load_csv = [["Building-20210705-20210719.csv", "Betriebshof A"]]

# options for external load CSV (options are used for all files specified above):
# set CSV column name, timestep duration in sec. (example: 10 min) and factor (example: input in Watt)
#include_ext_csv_option = [["column", "value"], ["step_duration_s", 600], ["factor", 0.001]]


# local feed in timeseries (in this example in subdirectory "timeseries" - relative to resulting json) and
# grid connector at which the timeseries shall be applied
# e.g. [["timeseries_1_path", "gc_name_1"], ["timeseries_2_path", "gc_name_2"]]
#include_feed_in_csv = [["timeseries/feed_in.csv", "Betriebshof A"]]

# options for feed in CSV (options are used for all files specified above):
# set CSV column name, timestep duration in sec. (example: 1 hour) and factor (example: input in Watt)
#include_feed_in_csv_option = [["column", "value"], ["step_duration_s", 3600], ["factor", 1]]


# energy price timeseries in EUR/kWh (in this example in parent directory - relative to resulting json) and
# grid connector at which the timeseries shall be applied
# e.g. [["timeseries_1_path", "gc_name_1"], ["timeseries_2_path", "gc_name_2"]]
#include_price_csv = [["../energy_price.csv", "Betriebshof A"]]

# options for price CSV (options are used for all files specified above):
# set CSV column name and timestep duration in sec. (example: 6 hours)
#include_price_csv_option = [["column", "value"], ["step_duration_s", 21600]]
# for more options, see https://github.com/rl-institut/spice_ev/wiki/Command-line-options#csv-file-options


########### SPICE_EV SIMULATE PARAMETERS ###############

strategy = distributed
# possible strategies: greedy, balanced, balanced_market, schedule, flex_window
# options: LOAD_STRAT (sub-strategy for some strategies), CONCURRENCY [-], HORIZON [h], PRICE_THRESHOLD [â‚¬]
strategy_option = [["CONCURRENCY", 1.0], ["PRICE_THRESHOLD", 0.001], ["ALLOW_NEGATIVE_SOC", 1]]

# show plots after simulation
visual = true

# show estimated remaining time instead of progress bar
# WARNING: slows down fast computations
eta = false

# give margin for desired SoC [0.0 - 1.0]
# margin = 0.1 -> simulation will not abort if vehicles reach at least 90% of the desired SoC before leaving.
# margin = 1.0 -> simulation continues with every positive SoC value, but may fail if trips can not be completed.
margin = 1.0

# generate output files with simulation data
save_timeseries = data/simulation_results/simulation_spiceEV.csv
save_results = data/simulation_results/simulation_spiceEV.json
