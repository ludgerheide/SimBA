##### Paths #####
### Input and output files and paths ###
# Input file containing trip information (required)
input_schedule = ./data/examples/trips_example.csv

# output files generated by eBusTool and SpiceEV are stored here (defaults to: data/sim_outputs)
output_directory = ./data/sim_outputs/

# electrified stations (defaults to: data/examples/electrified_stations.json)
electrified_stations = data/examples/electrified_stations.json

# vehicle types (defaults to: ./data/examples/vehicle_types.json)
vehicle_types = ./data/examples/vehicle_types.json

# Path to station data with stations heights
# (optional: needed if mileage in vehicle types not constant and inclination should be considered)
station_data_path =  data/examples/all_stations.csv

# Path to temperature csv. data with temperatures in deg Celsius over 0-23 hours
# (optional: needed if mileage in vehicle types not constant)
outside_temperature_over_day_path =  data/examples/default_temp_winter.csv

# Path to level of loading csv. data with temperatures in deg Celsius over 0-23 hours
# (optional: needed if mileage in vehicle types not constant)
level_of_loading_over_day_path =  data/examples/default_level_of_loading_over_day.csv

# cost parameters (needed if cost_calculation flag is set to true, see Flag section below)
cost_parameters_file = ./data/examples/cost_params.json

##### Modes #####
### Specify how you want to simulate the szenario ###
# Options: sim, neg_depb_to_oppb, neg_oppb_to_depb, service_optimization.
# sim runs a single simulation with the given inputs.
# neg_depb_to_oppb changes negative depb-rotations to oppb charging.
# neg_oppb_to_depb changes negative oppb-rotations to depb charging.
# service optimization finds the largest set of electrified rotations.
mode = sim

##### Flags #####
### Activate optional functions ###
# set flag for cost calculation:
cost_calculation = true

# Check rotation assumptions when building schedule?
check_rotation_consistency = false

# Remove rotations from schedule that violate assumptions? Needs check_rotation_consistency to have an effect
ignore_inconsistent_rotations = false

# generate report and plots, default: false
generate_report = true

# show plots for users to view, only valid if generate_report = true
show_plots = true

##### Physical setup of environment #####
### Parametrization of the physical setup ###
# Preferred charging type. Options: depb, oppb (default: oppb)
preferred_charging_type = oppb

# minimum fraction of capacity for recharge when leaving the depot. Helps calculating the
# minimum standing time at depot. Between 0 - 1. (default: 1)
min_recharge_deps_oppb = 1
min_recharge_deps_depb = 1

# default max power [kW] of grid connectors at depot and opp stations,
# individual gc_power per gc can be defined in electrified stations
# If cs power should not be limited, a very high number should be given (e.g. 100000 = default)
gc_power_opps = 100000
gc_power_deps = 100000

# default max power [kW] of charging station at depot and opp stations (default at opps: 300)
# at depot stations opp and depot busses have distinct charging stations (all deps default to: 150)
# individual cs_power per gc and cs type can be defined in electrified stations
cs_power_opps = 300
cs_power_deps_depb = 150
cs_power_deps_oppb = 150

# set minimum allowed state of charge when leaving
# distinguish between depot and opportunity station
desired_soc_deps = 1.0
desired_soc_opps = 1.0

# min charging time at depots and opp stations ##### minutes ##### (default: 0)
min_charging_time = 0

# buffer time at opp station if no specific buffer time is provided via the
# electrified_stations.json ##### minutes ##### (default: 0) Time specific buffer times can be set via a dict
# like: {"10-22": 5, "else": 2} NOTE: else clause is a MUST! The buffer time is deducted off of the
# planned standing time. It may resemble things like delays and/or docking procedures
default_buffer_time_opps = 0

##### SIMULATION HYPERPARAMETERS #####
# maximum number of days to simulate, if not set simulate entire schedule
#days = 10

# set length of timestep in minutes (default: 15 minute intervals)
interval = 1

# set random seed (for always random: set seed = null)
seed = 1

# time difference between signal time and actual start time of a vehicle event im min. (default: 10)
signal_time_dif = 10

# Show estimated time to finish simulation after each step. Not recommended for fast computations
eta = False
