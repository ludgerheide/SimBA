# Configs for the eBus Toolbox

##### INPUT/OUTPUT FILES AND PATHS #####

# Input file containing trip information (required)
input_schedule = "./tests/test_input_files/trips_example.csv"

# output files generated by eBusTool and SpiceEV are stored here (defaults to: data/sim_outputs)
output_directory = "./tests/test_output_files/"

# electrified stations (defaults to: data/examples/electrified_stations.json)
electrified_stations = "tests/test_input_files/electrified_stations.json"

# vehicle types (defaults to: ./data/examples/vehicle_types.json)
vehicle_types = ".tests/test_input_files/vehicle_types.json"

# Path to station data with stations heights
station_data_path =  "tests/test_input_files/all_stations.csv"

# Path to temperature csv. data with temperatures in deg Celsius over 0-23 hours (needed if mileage in vehicle types not constant)
outside_temperature_over_day_path =  "tests/test_input_files/default_temp_winter.csv"

# Path to level of loading csv. data with temperatures in deg Celsius over 0-23 hours (needed if mileage in vehicle types not constant)
level_of_loading_over_day_path =  "tests/test_input_files/default_level_of_loading_over_day.csv"


##### COST CALCULATION #####
# set flag for cost calculation:
cost_calculation = true
# cost parameters (Calculation of costs is optional, defaults to None)
cost_parameters_file = "./tests/test_input_files/cost_params.json"


##### SIMULATION HYPERPARAMETERS #####
# set random seed (for always random: set seed = null)
seed = 1

# Options: sim, neg_depb_to_oppb, neg_oppb_to_depb, service_optimization. Default: sim
# sim runs a single simulation with the given inputs.
# neg_depb_to_oppb changes negative depb-rotations to oppb charging.
# neg_oppb_to_depb changes negative oppb-rotations to depb charging.
# service optimization finds the largest set of electrified rotations.
mode = sim

# set length of timestep in minutes (default: 15 minute intervals)
interval = 1

# time difference between signal time and actual start time of a vehicle event im min. (default: 10)
signal_time_dif = 10

# Check rotation assumptions when building schedule?
check_rotation_consistency = false
# Remove rotations from schedule that violate assumptions? Needs check_rotation_consistency to have an effect
ignore_inconsistent_rotations = false

##### SIMULATION CONDITIONS AND BOUNDARIES #####

# maximum number of days to simulate, if not set simulate entire schedule
#days = 10

# set minimum allowed state of charge when leaving
# distinguish between depot and opportunity station
desired_soc_deps = 1.0
desired_soc_opps = 1

# Preferred charging type. Options: depb, oppb (default: oppb)
preferred_charging_type = "oppb"

# min charging time at depots and opp stations [minutes] (default: 0)
min_charging_time = 0

# buffer time at opp station if no specific buffer time is provided
# via the electrified_stations.json [minutes] (default: 0)
# Time specific buffer times can be set via a dict like:
# {"10-22": 5, "else": 2} NOTE: else clause is a MUST!
# The buffer time is deducted off of the planned standing time.
# It may resemble things like delays and/or docking procedures
default_buffer_time_opps = 0


##### PHYSICAL SETUP OF ENVIRONMENT #####

# minimum fraction of capacity for recharge when leaving the depot. Helps calculating the minimum standing time at depot. Between 0 - 1. (default: 1)
min_recharge_deps_oppb = 1
min_recharge_deps_depb = 1

# default max power of grid connectors at depot and opp stations,
# individual gc_power per gc can be defined in electrified stations
# default: Sum of max power of all charging stations at this grid connector
gc_power_opps = 1000
gc_power_deps = 1000

# default max power of charging station at depot and opp stations
# at depot stations opp and depot busses have distinct charging stations (all default to: 150)
# individual cs_power per gc and cs type can be defined in electrified stations
cs_power_opps = 400
cs_power_deps_depb = 100
cs_power_deps_oppb = 150

# define hours of traffic_jam (options are "stop&go" and "dense")
#rush_hour = {"stop&go": [["07:00", "09:00"], ["15:00", "17:00"]], "dense": [["17:00", "19:00"]]}


########### SPICE_EV SIMULATE PARAMETERS ###############

strategy = distributed
# possible strategies: greedy, balanced, balanced_market, schedule, flex_window
# options: LOAD_STRAT (sub-strategy for some strategies), CONCURRENCY [-], HORIZON [h], PRICE_THRESHOLD [â‚¬]
strategy_option = [["CONCURRENCY", 1.0], ["PRICE_THRESHOLD", 0.001], ["ALLOW_NEGATIVE_SOC", true], ["RESET_NEGATIVE_SOC", false]]

# generate report and plots, default: false
generate_report = true
# show plots for users to view, only valid if generate_report = true
show_plots = true

# give margin for desired SoC [0.0 - 1.0]
# margin = 0.1 -> simulation will not abort if vehicles reach at least 90% of the desired SoC before leaving.
# margin = 1.0 -> simulation continues with every positive SoC value, but may fail if trips can not be completed.
margin = 1.0
